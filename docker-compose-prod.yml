version: '3.8'

services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  web:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DEBUG=0
      - DATABASE_HOST=db
      - DATABASE_NAME=${POSTGRES_DB}
      - DATABASE_USER=${POSTGRES_USER}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_PORT=5432
    restart: unless-stopped

  nginx:
    image: nginx:1.23-alpine
    ports:
      - "80:5000"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/usr/share/nginx/html/static
      - media_volume:/usr/share/nginx/html/media
    depends_on:
      - web
      - frontend
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    expose:
      - 3000
    environment:
      - NEXT_PUBLIC_API_URL=http://nginx:5000
    restart: unless-stopped

  backup:
    image: postgres:13
    volumes:
      - ./backup-scripts:/backup-scripts
      - ./backups:/backups
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGHOST=db
    depends_on:
      - db
    entrypoint: ["bash", "/backup-scripts/backup-entrypoint.sh"]
    restart: unless-stopped

volumes:
  postgres_data:
  static_volume:
  media_volume: