version: '3.8'

services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=test_postgres_db
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d test_postgres_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    build: ./backend
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DEBUG=1
      - DATABASE_HOST=db
      - DATABASE_NAME=test_postgres_db
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_PORT=5432

  nginx:
    image: nginx:1.23-alpine
    ports:
      - "5000:5000"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/usr/share/nginx/html/static
      - media_volume:/usr/share/nginx/html/media
    depends_on:
      - web
      # if later frontend-service:
      # - frontend

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://nginx:5000

  backup:
    image: postgres:13
    volumes:
      - ./backup-scripts:/backup-scripts
      - ./backups:/backups
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=test_postgres_db
      - PGHOST=db
    depends_on:
      - db
    entrypoint: ["bash", "/backup-scripts/backup-entrypoint.sh"]


volumes:
  postgres_data:
  static_volume:
  media_volume: